# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: LLM Integration for Natural Language Event Management (One-Time & All-Day)
goal: Extend LLM capabilities to manage one-time and all-day events through
  natural language, including date/time parsing and basic temporal queries.
details: This phase brings natural language understanding to event management.
  The LLM will be used to parse event details from conversational input,
  including complex date and time expressions, and to understand basic queries
  about upcoming events.
tasks:
  - title: LLM-Powered Event Extraction (One-Time & All-Day)
    description: Develop system prompts and function calling specifications for the
      LLM to parse natural language descriptions of events (e.g., "Mom has a
      doctor's appointment next Tuesday at 10 AM for 1 hour") and extract
      structured event data (person, event name, date, time, duration, all-day
      status).
    files: []
    steps: []
  - title: Natural Language Event Storage (One-Time & All-Day)
    description: Implement the bot logic to process user messages describing events,
      use the LLM to extract structured event data, and store this data in the
      `events` table.
    files: []
    steps: []
  - title: Robust Date/Time Parsing and Timezone Awareness
    description: Leverage the LLM for parsing various natural language date and time
      expressions (e.g., "next Tuesday," "tomorrow at 3pm," "July 4th"). Ensure
      that all date/time information is processed with timezone awareness,
      defaulting to Hawaii time as specified, and stored consistently.
    files: []
    steps: []
  - title: Event Type Classification (One-Time, All-Day)
    description: Use the LLM to automatically classify events as one-time or all-day
      based on the user's natural language input.
    files: []
    steps: []
  - title: LLM-Powered Basic Temporal Query Understanding
    description: "Develop system prompts and function calling for the LLM to
      understand basic temporal queries such as \"What's happening this
      weekend?\", \"Show me everything for tomorrow,\" or \"What do I have on
      June 15th?\". "
    files: []
    steps: []
  - title: Natural Language Event Retrieval (Basic Temporal)
    description: Implement the logic to process these LLM-understood temporal
      queries, retrieve the relevant events from the database, and present them
      to the user.
    files: []
    steps: []
  - title: Communicate LLM Assumptions (Events)
    description: Ensure the bot clearly communicates any assumptions made during
      event processing, especially regarding dates, times, and event types
      (e.g., "Okay, I've scheduled 'Doctor's appointment' for Mom for next
      Tuesday, [calculated_date], at 10:00 AM Hawaii Time.").
    files: []
    steps: []
id: 1j6amh3-4
status: pending
dependencies:
  - 1j6amh3-2
  - 1j6amh3-3
planGeneratedAt: 2025-05-30T19:03:57.505Z
createdAt: 2025-05-30T19:03:57.505Z
updatedAt: 2025-05-30T19:03:57.505Z
project:
  goal: To create a natural language Discord bot that serves as a personal
    information manager, storing and retrieving time-based events and general
    facts, using an LLM-powered conversational interface.
  title: Personal Assistant Discord Bot Development Plan
  details: The project involves building a Discord bot using Bun, SQLite,
    Discord.js, and the Vercel AI SDK with Gemini Flash 2.5. The bot will manage
    events (one-time, recurring, all-day) and facts (attributes, relationships,
    credentials, preferences, contacts). Key features include natural language
    understanding for input, queries, corrections, and deletions; intelligent
    processing like automatic information extraction and smart assumptions;
    comprehensive query capabilities; flexible update mechanisms; and automated
    features like a daily summary. The initial version will support a single
    user.
