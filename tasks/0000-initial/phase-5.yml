# yaml-language-server: $schema=https://raw.githubusercontent.com/dimfeld/llmutils/main/schema/rmplan-plan-schema.json
title: Recurring Event Management
goal: Implement comprehensive support for defining, storing, generating
  instances of, and querying recurring events using natural language.
details: This phase introduces the ability to manage events that repeat on
  various schedules. It involves extending the database schema, using the LLM to
  understand recurring patterns from natural language, and developing logic to
  generate event instances for queries.
tasks:
  - title: Database Schema for Recurring Events
    description: Design and implement schema extensions or new tables (e.g.,
      `recurring_event_rules`) to store the rules for recurring events. This
      should include parameters like frequency (daily, weekly, monthly, yearly),
      interval, specific days (of week/month), start date, and optionally an end
      date or occurrence count.
    files: []
    steps: []
  - title: LLM-Powered Recurring Event Definition
    description: Develop system prompts and function calling specifications for the
      LLM to parse natural language definitions of recurring events (e.g.,
      "Sarah's piano lesson is every Wednesday at 4pm," "Team meeting on the
      first Monday of each month," "Annual birthday for John on May 5th").
    files: []
    steps: []
  - title: Natural Language Recurring Event Storage
    description: Implement the logic to take the structured recurring rule data
      extracted by the LLM and store it in the database.
    files: []
    steps: []
  - title: Recurring Event Instance Generation Logic
    description: Develop a system to generate concrete instances of recurring events
      based on their stored rules. This logic will be used when users query for
      events within a specific time range. Decide on a strategy for generation
      (e.g., on-the-fly for a given query range, or pre-generating up to a
      certain future horizon).
    files: []
    steps: []
  - title: Support for Common Recurring Patterns
    description: Implement support for common recurrence patterns, including daily,
      weekly on specific weekdays, monthly on a specific day number or Nth
      weekday (e.g., "first Monday"), and annually on a specific month/day.
    files: []
    steps: []
  - title: End Date/Count Support for Recurring Series
    description: Allow users to specify an end date or a total number of occurrences
      for a recurring event series, and ensure the instance generation logic
      respects these limits.
    files: []
    steps: []
  - title: Integration of Recurring Events with Temporal Queries
    description: Modify existing temporal query logic (from Phase 4) to include
      instances of recurring events in the results, providing a complete view of
      scheduled activities.
    files: []
    steps: []
id: 1j6amh3-5
status: pending
dependencies:
  - 1j6amh3-4
planGeneratedAt: 2025-05-30T19:03:57.505Z
createdAt: 2025-05-30T19:03:57.505Z
updatedAt: 2025-05-30T19:03:57.505Z
project:
  goal: To create a natural language Discord bot that serves as a personal
    information manager, storing and retrieving time-based events and general
    facts, using an LLM-powered conversational interface.
  title: Personal Assistant Discord Bot Development Plan
  details: The project involves building a Discord bot using Bun, SQLite,
    Discord.js, and the Vercel AI SDK with Gemini Flash 2.5. The bot will manage
    events (one-time, recurring, all-day) and facts (attributes, relationships,
    credentials, preferences, contacts). Key features include natural language
    understanding for input, queries, corrections, and deletions; intelligent
    processing like automatic information extraction and smart assumptions;
    comprehensive query capabilities; flexible update mechanisms; and automated
    features like a daily summary. The initial version will support a single
    user.
